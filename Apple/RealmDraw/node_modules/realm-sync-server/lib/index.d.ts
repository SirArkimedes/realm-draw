export declare enum RealmSyncServerOperatingMode {
    MasterWithNoSlave = 0,
    MasterWithAsynchronousSlave = 1,
    MasterWithSynchronousSlave = 2,
    Slave = 3
}
export interface IRealmSyncServerConfiguration {
    id?: string;
    dataPath: string;
    publicKeyPath: string;
    logCallback?: (level: number, message: string) => void;
    logLevel?: string;
    errorCallback?: (name: string, message: string) => void;
    slaveStatusCallback?: (id: string, upToDate: boolean) => void;
    listenAddress?: string;
    listenPort?: string | number;
    ssl?: boolean;
    sslCertificatePath?: string;
    sslCertificateKeyPath?: string;
    statsEndpoint?: string;
    operatingMode?: RealmSyncServerOperatingMode;
    masterAddress?: string;
    masterPort?: string | number;
    masterSlaveSharedSecret?: string;
    masterSlaveSsl?: boolean;
    masterSlaveSslTrustCertificatePath?: string;
    featureToken?: string;
    enableDownloadLogCompaction?: boolean;
    maxDownloadSize?: number;
    listenBacklog?: number;
    tcpNoDelay?: boolean;
    isSubtierServer?: boolean;
    upstreamUrl?: string;
    upstreamAccessToken?: string;
    logLsofPeriod?: number;
    enableRealmStateSizeReporting?: boolean;
    historyTtl?: number;
    historyCompactionInterval?: number;
    enableLogCompaction?: boolean;
    shouldCompactRealmsAtStart?: boolean;
    shouldPerformPartialSyncAtStart?: boolean;
    enableDebugMode?: boolean;
}
export interface IRealmSyncServerAddress {
    address: string;
    port: number;
}
export interface IRealmSyncServer {
    start(callback: (error?: any) => void): void;
    stop(callback: (error?: any) => void): void;
    address(): IRealmSyncServerAddress;
    stopSyncAndWaitForBackupCompletion(callback: (didComplete: any) => void, timeout: number): void;
}
export interface IRealmSyncServerConstructor {
    readonly prototype: IRealmSyncServer;
    new (config: IRealmSyncServerConfiguration): any;
}
export declare class RealmSyncServer {
    private syncServer;
    constructor(config: IRealmSyncServerConfiguration);
    start(): Promise<void>;
    stop(): Promise<void>;
    address(): IRealmSyncServerAddress;
    stopSyncAndWaitForBackupCompletion(timeout: number): Promise<void>;
}
