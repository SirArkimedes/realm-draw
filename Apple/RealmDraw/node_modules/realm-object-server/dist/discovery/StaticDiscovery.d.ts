import { ServiceWatch } from "./ServiceWatch";
import { ServiceHandle } from "./ServiceHandle";
import { Discovery } from "./Discovery";
export interface StaticDiscoveryConfig {
    sync: {
        [label: string]: string;
    };
    default: string;
    realms?: string;
    permissions?: string;
}
export interface StaticDiscoveryParams {
    config: StaticDiscoveryConfig;
}
export declare class StaticDiscovery extends Discovery {
    config: StaticDiscoveryConfig;
    constructor(params: StaticDiscoveryParams);
    registerService(service: any, serverAddress: string, serverPort: any): Promise<void>;
    deregisterService(service: any): Promise<void>;
    findAll(name: string, tags?: string[]): Promise<ServiceHandle[]>;
    watchService(name: string, tags?: string[]): ServiceWatch;
}
