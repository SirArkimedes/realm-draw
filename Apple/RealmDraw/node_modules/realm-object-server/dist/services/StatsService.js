"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const superagent = require("superagent");
const decorators_1 = require("../decorators");
const Server_1 = require("../Server");
let StatsService = class StatsService {
    getExtraLabels(req) {
        return {};
    }
    start(server) {
        this.server = server;
    }
    getInstantValues(metricNamesString, req) {
        return __awaiter(this, void 0, void 0, function* () {
            this.sanityCheck();
            const userLabels = req.query;
            const extraLabels = this.getExtraLabels(req);
            const labels = Object.assign({}, userLabels, extraLabels);
            const metricNames = metricNamesString.split(",");
            const metricPromises = metricNames.map((metricName) => __awaiter(this, void 0, void 0, function* () {
                const values = yield this.statsStorage.getInstantValues(metricName, labels);
                return { metricName, values };
            }));
            const metrics = yield Promise.all(metricPromises);
            const response = {};
            metrics.forEach(({ metricName, values }) => {
                response[metricName] = values;
            });
            return response;
        });
    }
    reportRealmStateSize(path = "") {
        return __awaiter(this, void 0, void 0, function* () {
            const syncServices = yield this.server.discovery.findAll("sync");
            for (const syncService of syncServices) {
                const host = `${syncService.address}:${syncService.port}`;
                const url = `http://${host}/report-realm-state-size/${path}`;
                const response = yield superagent.get(url);
                if (!response.ok) {
                    throw new Error(`Failed to report size from sync server: ${host}`);
                }
            }
            return {
                syncServiceCount: syncServices.length,
            };
        });
    }
    sanityCheck() {
        if (!this.statsStorage) {
            throw new Error("Expected the server to set the statsStorage on the StatsService");
        }
    }
};
__decorate([
    decorators_1.Start(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Server_1.Server]),
    __metadata("design:returntype", void 0)
], StatsService.prototype, "start", null);
__decorate([
    decorators_1.Get("/instant/:metricNames"),
    __param(0, decorators_1.Params("metricNames")),
    __param(1, decorators_1.Request()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], StatsService.prototype, "getInstantValues", null);
__decorate([
    decorators_1.Post("/report-realm-state-size/:path?"),
    __param(0, decorators_1.Params("path")),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], StatsService.prototype, "reportRealmStateSize", null);
StatsService = __decorate([
    decorators_1.BaseRoute("/stats", { allowAnonymous: false }),
    decorators_1.Cors("/"),
    decorators_1.ServiceName("stats")
], StatsService);
exports.StatsService = StatsService;
//# sourceMappingURL=StatsService.js.map