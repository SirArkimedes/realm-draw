import * as commander from "commander";
import { IAuthProvider } from "./auth/AuthProvider";
import { Logger } from "./shared/Logger";
import { Server, ServerConfig } from "./Server";
export interface BasicServerStartParams extends ServerConfig {
    accessTokenTtl?: number;
    refreshTokenTtl?: number;
    authProviders?: IAuthProvider[];
    defaultProviders?: string[];
    logger?: Logger;
    services?: any[];
    enableDownloadLogCompaction?: boolean;
    enableRealmSizeReporting?: boolean;
    maxDownloadSize?: number;
    startupTimeout?: number;
    historyTtl?: number;
    shouldCompactRealmsAtStart?: boolean;
    shouldPerformPartialSyncAtStart?: boolean;
}
export declare class BasicServer extends Server {
    protected commander: commander.Command;
    protected unhandledRejectionCallback: (reason, promise) => void;
    constructor();
    private runInit(projectName, options);
    run(argv: string[]): Promise<void>;
    start(params: BasicServerStartParams): Promise<void>;
    shutdown(): Promise<void>;
    private runStart(command);
    private runBackup(args, logger?);
}
